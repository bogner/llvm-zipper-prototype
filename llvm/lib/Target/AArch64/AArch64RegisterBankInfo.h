//===- AArch64RegisterBankInfo -----------------------------------*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the RegisterBankInfo class for AArch64.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H
#define LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H

#include "llvm/CodeGen/GlobalISel/RegisterBankInfo.h"

namespace llvm {

class TargetRegisterInfo;

namespace AArch64 {
enum {
  GPRRegBankID = 0, /// General Purpose Registers: W, X.
  FPRRegBankID = 1, /// Floating Point/Vector Registers: B, H, S, D, Q.
  CCRRegBankID = 2, /// Conditional register: NZCV.
  NumRegisterBanks
};
} // End AArch64 namespace.

class AArch64GenRegisterBankInfo : public RegisterBankInfo {
private:
  static RegisterBank *RegBanks[];

protected:
  AArch64GenRegisterBankInfo();

public:
  static RegisterBankInfo::PartialMapping PartMappings[];
  static RegisterBankInfo::ValueMapping ValMappings[];
  static bool checkPartialMap(unsigned Idx, unsigned ValStartIdx,
                              unsigned ValLength, const RegisterBank &RB);
  static bool checkValueMapImpl(unsigned Idx, unsigned FirstInBank,
                                unsigned Size, unsigned Offset);
  enum PartialMappingIdx {
    PMI_None = -1,
    PMI_GPR32 = 1,
    PMI_GPR64,
    PMI_FPR32,
    PMI_FPR64,
    PMI_FPR128,
    PMI_FPR256,
    PMI_FPR512,
    PMI_FirstGPR = PMI_GPR32,
    PMI_LastGPR = PMI_GPR64,
    PMI_FirstFPR = PMI_FPR32,
    PMI_LastFPR = PMI_FPR512,
    PMI_Min = PMI_FirstGPR,
  };

  enum ValueMappingIdx {
    First3OpsIdx = 0,
    Last3OpsIdx = 18,
    DistanceBetweenRegBanks = 3,
    FirstCrossRegCpyIdx = 21,
    LastCrossRegCpyIdx = 27,
    DistanceBetweenCrossRegCpy = 2
  };

  static bool checkPartialMappingIdx(PartialMappingIdx FirstAlias,
                                     PartialMappingIdx LastAlias,
                                     ArrayRef<PartialMappingIdx> Order) {
    if (Order.front() != FirstAlias)
      return false;
    if (Order.back() != LastAlias)
      return false;
    if (Order.front() > Order.back())
      return false;

    PartialMappingIdx Previous = Order.front();
    bool First = true;
    for (const auto &Current : Order) {
      if (First) {
        First = false;
        continue;
      }
      if (Previous + 1 != Current)
        return false;
      Previous = Current;
    }
    return true;
  }

  static unsigned getRegBankBaseIdxOffset(unsigned RBIdx, unsigned Size) {
    if (RBIdx == PMI_FirstGPR) {
      if (Size <= 32)
        return 0;
      if (Size <= 64)
        return 1;
      llvm_unreachable("Unexpected size");
    }
    if (RBIdx == PMI_FirstFPR) {
      if (Size <= 32)
        return 0;
      if (Size <= 64)
        return 1;
      if (Size <= 128)
        return 2;
      if (Size <= 256)
        return 3;
      if (Size <= 512)
        return 4;
      llvm_unreachable("Unexpected size");
    }
    llvm_unreachable("Unexpected bank");
}
};

/// This class provides the information for the target register banks.
class AArch64RegisterBankInfo final : public AArch64GenRegisterBankInfo {
  /// See RegisterBankInfo::applyMapping.
  void applyMappingImpl(const OperandsMapper &OpdMapper) const override;

  /// Get an instruction mapping where all the operands map to
  /// the same register bank and have similar size.
  ///
  /// \pre MI.getNumOperands() <= 3
  ///
  /// \return An InstructionMappings with a statically allocated
  /// OperandsMapping.
  static InstructionMapping
  getSameKindOfOperandsMapping(const MachineInstr &MI);

public:
  AArch64RegisterBankInfo(const TargetRegisterInfo &TRI);

  unsigned copyCost(const RegisterBank &A, const RegisterBank &B,
                    unsigned Size) const override;

  const RegisterBank &
  getRegBankFromRegClass(const TargetRegisterClass &RC) const override;

  InstructionMappings
  getInstrAlternativeMappings(const MachineInstr &MI) const override;

  InstructionMapping getInstrMapping(const MachineInstr &MI) const override;
};
} // End llvm namespace.
#endif
