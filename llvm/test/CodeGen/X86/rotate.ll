; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-linux -march=x86 | FileCheck %s

define i32 @rotl32(i32 %A, i8 %Amt) {
; CHECK-LABEL: rotl32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    roll %cl, %eax
; CHECK-NEXT:    retl
	%shift.upgrd.1 = zext i8 %Amt to i32		; <i32> [#uses=1]
	%B = shl i32 %A, %shift.upgrd.1		; <i32> [#uses=1]
	%Amt2 = sub i8 32, %Amt		; <i8> [#uses=1]
	%shift.upgrd.2 = zext i8 %Amt2 to i32		; <i32> [#uses=1]
	%C = lshr i32 %A, %shift.upgrd.2		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i32 @rotr32(i32 %A, i8 %Amt) {
; CHECK-LABEL: rotr32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rorl %cl, %eax
; CHECK-NEXT:    retl
	%shift.upgrd.3 = zext i8 %Amt to i32		; <i32> [#uses=1]
	%B = lshr i32 %A, %shift.upgrd.3		; <i32> [#uses=1]
	%Amt2 = sub i8 32, %Amt		; <i8> [#uses=1]
	%shift.upgrd.4 = zext i8 %Amt2 to i32		; <i32> [#uses=1]
	%C = shl i32 %A, %shift.upgrd.4		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i32 @rotli32(i32 %A) {
; CHECK-LABEL: rotli32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    roll $5, %eax
; CHECK-NEXT:    retl
	%B = shl i32 %A, 5		; <i32> [#uses=1]
	%C = lshr i32 %A, 27		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i32 @rotri32(i32 %A) {
; CHECK-LABEL: rotri32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    roll $27, %eax
; CHECK-NEXT:    retl
	%B = lshr i32 %A, 5		; <i32> [#uses=1]
	%C = shl i32 %A, 27		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i32 @rotl1_32(i32 %A) {
; CHECK-LABEL: rotl1_32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    roll %eax
; CHECK-NEXT:    retl
	%B = shl i32 %A, 1		; <i32> [#uses=1]
	%C = lshr i32 %A, 31		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i32 @rotr1_32(i32 %A) {
; CHECK-LABEL: rotr1_32:
; CHECK:       # BB#0:
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    roll $31, %eax
; CHECK-NEXT:    retl
	%B = shl i32 %A, 31		; <i32> [#uses=1]
	%C = lshr i32 %A, 1		; <i32> [#uses=1]
	%D = or i32 %B, %C		; <i32> [#uses=1]
	ret i32 %D
}

define i16 @rotl16(i16 %A, i8 %Amt) {
; CHECK-LABEL: rotl16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rolw %cl, %ax
; CHECK-NEXT:    retl
	%shift.upgrd.5 = zext i8 %Amt to i16		; <i16> [#uses=1]
	%B = shl i16 %A, %shift.upgrd.5		; <i16> [#uses=1]
	%Amt2 = sub i8 16, %Amt		; <i8> [#uses=1]
	%shift.upgrd.6 = zext i8 %Amt2 to i16		; <i16> [#uses=1]
	%C = lshr i16 %A, %shift.upgrd.6		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i16 @rotr16(i16 %A, i8 %Amt) {
; CHECK-LABEL: rotr16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rorw %cl, %ax
; CHECK-NEXT:    retl
	%shift.upgrd.7 = zext i8 %Amt to i16		; <i16> [#uses=1]
	%B = lshr i16 %A, %shift.upgrd.7		; <i16> [#uses=1]
	%Amt2 = sub i8 16, %Amt		; <i8> [#uses=1]
	%shift.upgrd.8 = zext i8 %Amt2 to i16		; <i16> [#uses=1]
	%C = shl i16 %A, %shift.upgrd.8		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i16 @rotli16(i16 %A) {
; CHECK-LABEL: rotli16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rolw $5, %ax
; CHECK-NEXT:    retl
	%B = shl i16 %A, 5		; <i16> [#uses=1]
	%C = lshr i16 %A, 11		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i16 @rotri16(i16 %A) {
; CHECK-LABEL: rotri16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rolw $11, %ax
; CHECK-NEXT:    retl
	%B = lshr i16 %A, 5		; <i16> [#uses=1]
	%C = shl i16 %A, 11		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i16 @rotl1_16(i16 %A) {
; CHECK-LABEL: rotl1_16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rolw %ax
; CHECK-NEXT:    retl
	%B = shl i16 %A, 1		; <i16> [#uses=1]
	%C = lshr i16 %A, 15		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i16 @rotr1_16(i16 %A) {
; CHECK-LABEL: rotr1_16:
; CHECK:       # BB#0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    rolw $15, %ax
; CHECK-NEXT:    retl
	%B = lshr i16 %A, 1		; <i16> [#uses=1]
	%C = shl i16 %A, 15		; <i16> [#uses=1]
	%D = or i16 %B, %C		; <i16> [#uses=1]
	ret i16 %D
}

define i8 @rotl8(i8 %A, i8 %Amt) {
; CHECK-LABEL: rotl8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rolb %cl, %al
; CHECK-NEXT:    retl
	%B = shl i8 %A, %Amt		; <i8> [#uses=1]
	%Amt2 = sub i8 8, %Amt		; <i8> [#uses=1]
	%C = lshr i8 %A, %Amt2		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}

define i8 @rotr8(i8 %A, i8 %Amt) {
; CHECK-LABEL: rotr8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %cl
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rorb %cl, %al
; CHECK-NEXT:    retl
	%B = lshr i8 %A, %Amt		; <i8> [#uses=1]
	%Amt2 = sub i8 8, %Amt		; <i8> [#uses=1]
	%C = shl i8 %A, %Amt2		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}

define i8 @rotli8(i8 %A) {
; CHECK-LABEL: rotli8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rolb $5, %al
; CHECK-NEXT:    retl
	%B = shl i8 %A, 5		; <i8> [#uses=1]
	%C = lshr i8 %A, 3		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}

define i8 @rotri8(i8 %A) {
; CHECK-LABEL: rotri8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rolb $3, %al
; CHECK-NEXT:    retl
	%B = lshr i8 %A, 5		; <i8> [#uses=1]
	%C = shl i8 %A, 3		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}

define i8 @rotl1_8(i8 %A) {
; CHECK-LABEL: rotl1_8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rolb %al
; CHECK-NEXT:    retl
	%B = shl i8 %A, 1		; <i8> [#uses=1]
	%C = lshr i8 %A, 7		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}

define i8 @rotr1_8(i8 %A) {
; CHECK-LABEL: rotr1_8:
; CHECK:       # BB#0:
; CHECK-NEXT:    movb {{[0-9]+}}(%esp), %al
; CHECK-NEXT:    rolb $7, %al
; CHECK-NEXT:    retl
	%B = lshr i8 %A, 1		; <i8> [#uses=1]
	%C = shl i8 %A, 7		; <i8> [#uses=1]
	%D = or i8 %B, %C		; <i8> [#uses=1]
	ret i8 %D
}
