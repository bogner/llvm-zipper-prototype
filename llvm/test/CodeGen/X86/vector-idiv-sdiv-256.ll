; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx | FileCheck %s --check-prefix=AVX --check-prefix=AVX1
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s --check-prefix=AVX --check-prefix=AVX2

;
; sdiv by 7
;

define <4 x i64> @test_div7_4i64(<4 x i64> %a) nounwind {
; AVX1-LABEL: test_div7_4i64:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrq $1, %xmm1, %rax
; AVX1-NEXT:    movabsq $5270498306774157605, %rcx # imm = 0x4924924924924925
; AVX1-NEXT:    imulq %rcx
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    vmovq %rdx, %xmm2
; AVX1-NEXT:    vmovq %xmm1, %rax
; AVX1-NEXT:    imulq %rcx
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    vmovq %rdx, %xmm1
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX1-NEXT:    vpextrq $1, %xmm0, %rax
; AVX1-NEXT:    imulq %rcx
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    vmovq %rdx, %xmm2
; AVX1-NEXT:    vmovq %xmm0, %rax
; AVX1-NEXT:    imulq %rcx
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    vmovq %rdx, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_div7_4i64:
; AVX2:       # BB#0:
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX2-NEXT:    vpextrq $1, %xmm1, %rax
; AVX2-NEXT:    movabsq $5270498306774157605, %rcx # imm = 0x4924924924924925
; AVX2-NEXT:    imulq %rcx
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    vmovq %rdx, %xmm2
; AVX2-NEXT:    vmovq %xmm1, %rax
; AVX2-NEXT:    imulq %rcx
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    vmovq %rdx, %xmm1
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX2-NEXT:    vpextrq $1, %xmm0, %rax
; AVX2-NEXT:    imulq %rcx
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    vmovq %rdx, %xmm2
; AVX2-NEXT:    vmovq %xmm0, %rax
; AVX2-NEXT:    imulq %rcx
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    vmovq %rdx, %xmm0
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = sdiv <4 x i64> %a, <i64 7, i64 7, i64 7, i64 7>
  ret <4 x i64> %res
}

define <8 x i32> @test_div7_8i32(<8 x i32> %a) nounwind {
; AVX1-LABEL: test_div7_8i32:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrd $1, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vmovd %xmm1, %ecx
; AVX1-NEXT:    movslq %ecx, %rcx
; AVX1-NEXT:    imulq $-1840700269, %rcx, %rdx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rdx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrd $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $2, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrd $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $3, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrd $3, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrd $1, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vmovd %xmm0, %ecx
; AVX1-NEXT:    movslq %ecx, %rcx
; AVX1-NEXT:    imulq $-1840700269, %rcx, %rdx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rdx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrd $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $2, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrd $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $3, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    sarl $2, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrd $3, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_div7_8i32:
; AVX2:       # BB#0:
; AVX2-NEXT:    vpbroadcastd {{.*}}(%rip), %ymm1
; AVX2-NEXT:    vpshufd {{.*#+}} ymm2 = ymm1[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpshufd {{.*#+}} ymm3 = ymm0[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpmuldq %ymm2, %ymm3, %ymm2
; AVX2-NEXT:    vpmuldq %ymm1, %ymm0, %ymm1
; AVX2-NEXT:    vpshufd {{.*#+}} ymm1 = ymm1[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpblendd {{.*#+}} ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
; AVX2-NEXT:    vpaddd %ymm0, %ymm1, %ymm0
; AVX2-NEXT:    vpsrld $31, %ymm0, %ymm1
; AVX2-NEXT:    vpsrad $2, %ymm0, %ymm0
; AVX2-NEXT:    vpaddd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = sdiv <8 x i32> %a, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  ret <8 x i32> %res
}

define <16 x i16> @test_div7_16i16(<16 x i16> %a) nounwind {
; AVX1-LABEL: test_div7_16i16:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrw $1, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vmovd %xmm1, %ecx
; AVX1-NEXT:    movswl %cx, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrw $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $2, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $3, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $4, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $5, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $6, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $7, %xmm1, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $7, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrw $1, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vmovd %xmm0, %ecx
; AVX1-NEXT:    movswl %cx, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrw $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $2, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $3, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $4, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $5, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $6, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $7, %xmm0, %eax
; AVX1-NEXT:    cwtl
; AVX1-NEXT:    imull $18725, %eax, %eax # imm = 0x4925
; AVX1-NEXT:    movl %eax, %ecx
; AVX1-NEXT:    shrl $16, %ecx
; AVX1-NEXT:    sarw %cx
; AVX1-NEXT:    shrl $31, %eax
; AVX1-NEXT:    addl %ecx, %eax
; AVX1-NEXT:    vpinsrw $7, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_div7_16i16:
; AVX2:       # BB#0:
; AVX2-NEXT:    vpmulhw {{.*}}(%rip), %ymm0, %ymm0
; AVX2-NEXT:    vpsrlw $15, %ymm0, %ymm1
; AVX2-NEXT:    vpsraw $1, %ymm0, %ymm0
; AVX2-NEXT:    vpaddw %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = sdiv <16 x i16> %a, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <16 x i16> %res
}

define <32 x i8> @test_div7_32i8(<32 x i8> %a) nounwind {
; AVX1-LABEL: test_div7_32i8:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrb $1, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpextrb $0, %xmm1, %ecx
; AVX1-NEXT:    movsbl %cl, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %edx
; AVX1-NEXT:    shrl $8, %edx
; AVX1-NEXT:    addb %dl, %cl
; AVX1-NEXT:    movb %cl, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %cl
; AVX1-NEXT:    addb %dl, %cl
; AVX1-NEXT:    movzbl %cl, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $2, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $3, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $4, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $5, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $6, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $7, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $8, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $9, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $10, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $11, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $12, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $13, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $14, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $15, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrb $1, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpextrb $0, %xmm0, %ecx
; AVX1-NEXT:    movsbl %cl, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %edx
; AVX1-NEXT:    shrl $8, %edx
; AVX1-NEXT:    addb %dl, %cl
; AVX1-NEXT:    movb %cl, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %cl
; AVX1-NEXT:    addb %dl, %cl
; AVX1-NEXT:    movzbl %cl, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $2, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $3, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $4, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $5, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $6, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $7, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $8, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $9, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $10, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $11, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $12, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $13, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $14, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $15, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %eax
; AVX1-NEXT:    imull $-109, %eax, %ecx
; AVX1-NEXT:    shrl $8, %ecx
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_div7_32i8:
; AVX2:       # BB#0:
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX2-NEXT:    vpextrb $1, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpextrb $0, %xmm1, %ecx
; AVX2-NEXT:    movsbl %cl, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %edx
; AVX2-NEXT:    shrl $8, %edx
; AVX2-NEXT:    addb %dl, %cl
; AVX2-NEXT:    movb %cl, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %cl
; AVX2-NEXT:    addb %dl, %cl
; AVX2-NEXT:    movzbl %cl, %ecx
; AVX2-NEXT:    vmovd %ecx, %xmm2
; AVX2-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $2, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $3, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $4, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $5, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $6, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $7, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $8, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $9, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $10, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $11, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $12, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $13, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $14, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $15, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm1
; AVX2-NEXT:    vpextrb $1, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpextrb $0, %xmm0, %ecx
; AVX2-NEXT:    movsbl %cl, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %edx
; AVX2-NEXT:    shrl $8, %edx
; AVX2-NEXT:    addb %dl, %cl
; AVX2-NEXT:    movb %cl, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %cl
; AVX2-NEXT:    addb %dl, %cl
; AVX2-NEXT:    movzbl %cl, %ecx
; AVX2-NEXT:    vmovd %ecx, %xmm2
; AVX2-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $2, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $3, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $4, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $5, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $6, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $7, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $8, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $9, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $10, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $11, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $12, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $13, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $14, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $15, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %eax
; AVX2-NEXT:    imull $-109, %eax, %ecx
; AVX2-NEXT:    shrl $8, %ecx
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm0
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = sdiv <32 x i8> %a, <i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7>
  ret <32 x i8> %res
}

;
; srem by 7
;

define <4 x i64> @test_rem7_4i64(<4 x i64> %a) nounwind {
; AVX1-LABEL: test_rem7_4i64:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrq $1, %xmm1, %rcx
; AVX1-NEXT:    movabsq $5270498306774157605, %rsi # imm = 0x4924924924924925
; AVX1-NEXT:    movq %rcx, %rax
; AVX1-NEXT:    imulq %rsi
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    leaq (,%rdx,8), %rax
; AVX1-NEXT:    subq %rdx, %rax
; AVX1-NEXT:    subq %rax, %rcx
; AVX1-NEXT:    vmovq %rcx, %xmm2
; AVX1-NEXT:    vmovq %xmm1, %rcx
; AVX1-NEXT:    movq %rcx, %rax
; AVX1-NEXT:    imulq %rsi
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    leaq (,%rdx,8), %rax
; AVX1-NEXT:    subq %rdx, %rax
; AVX1-NEXT:    subq %rax, %rcx
; AVX1-NEXT:    vmovq %rcx, %xmm1
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX1-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX1-NEXT:    movq %rcx, %rax
; AVX1-NEXT:    imulq %rsi
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    leaq (,%rdx,8), %rax
; AVX1-NEXT:    subq %rdx, %rax
; AVX1-NEXT:    subq %rax, %rcx
; AVX1-NEXT:    vmovq %rcx, %xmm2
; AVX1-NEXT:    vmovq %xmm0, %rcx
; AVX1-NEXT:    movq %rcx, %rax
; AVX1-NEXT:    imulq %rsi
; AVX1-NEXT:    movq %rdx, %rax
; AVX1-NEXT:    shrq $63, %rax
; AVX1-NEXT:    sarq %rdx
; AVX1-NEXT:    addq %rax, %rdx
; AVX1-NEXT:    leaq (,%rdx,8), %rax
; AVX1-NEXT:    subq %rdx, %rax
; AVX1-NEXT:    subq %rax, %rcx
; AVX1-NEXT:    vmovq %rcx, %xmm0
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_rem7_4i64:
; AVX2:       # BB#0:
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX2-NEXT:    vpextrq $1, %xmm1, %rcx
; AVX2-NEXT:    movabsq $5270498306774157605, %rsi # imm = 0x4924924924924925
; AVX2-NEXT:    movq %rcx, %rax
; AVX2-NEXT:    imulq %rsi
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    leaq (,%rdx,8), %rax
; AVX2-NEXT:    subq %rdx, %rax
; AVX2-NEXT:    subq %rax, %rcx
; AVX2-NEXT:    vmovq %rcx, %xmm2
; AVX2-NEXT:    vmovq %xmm1, %rcx
; AVX2-NEXT:    movq %rcx, %rax
; AVX2-NEXT:    imulq %rsi
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    leaq (,%rdx,8), %rax
; AVX2-NEXT:    subq %rdx, %rax
; AVX2-NEXT:    subq %rax, %rcx
; AVX2-NEXT:    vmovq %rcx, %xmm1
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX2-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX2-NEXT:    movq %rcx, %rax
; AVX2-NEXT:    imulq %rsi
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    leaq (,%rdx,8), %rax
; AVX2-NEXT:    subq %rdx, %rax
; AVX2-NEXT:    subq %rax, %rcx
; AVX2-NEXT:    vmovq %rcx, %xmm2
; AVX2-NEXT:    vmovq %xmm0, %rcx
; AVX2-NEXT:    movq %rcx, %rax
; AVX2-NEXT:    imulq %rsi
; AVX2-NEXT:    movq %rdx, %rax
; AVX2-NEXT:    shrq $63, %rax
; AVX2-NEXT:    sarq %rdx
; AVX2-NEXT:    addq %rax, %rdx
; AVX2-NEXT:    leaq (,%rdx,8), %rax
; AVX2-NEXT:    subq %rdx, %rax
; AVX2-NEXT:    subq %rax, %rcx
; AVX2-NEXT:    vmovq %rcx, %xmm0
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = srem <4 x i64> %a, <i64 7, i64 7, i64 7, i64 7>
  ret <4 x i64> %res
}

define <8 x i32> @test_rem7_8i32(<8 x i32> %a) nounwind {
; AVX1-LABEL: test_rem7_8i32:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrd $1, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vmovd %xmm1, %ecx
; AVX1-NEXT:    movslq %ecx, %rcx
; AVX1-NEXT:    imulq $-1840700269, %rcx, %rdx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rdx
; AVX1-NEXT:    addl %ecx, %edx
; AVX1-NEXT:    movl %edx, %esi
; AVX1-NEXT:    shrl $31, %esi
; AVX1-NEXT:    sarl $2, %edx
; AVX1-NEXT:    addl %esi, %edx
; AVX1-NEXT:    leal (,%rdx,8), %esi
; AVX1-NEXT:    subl %edx, %esi
; AVX1-NEXT:    subl %esi, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrd $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $2, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrd $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $3, %xmm1, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrd $3, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrd $1, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vmovd %xmm0, %ecx
; AVX1-NEXT:    movslq %ecx, %rcx
; AVX1-NEXT:    imulq $-1840700269, %rcx, %rdx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rdx
; AVX1-NEXT:    addl %ecx, %edx
; AVX1-NEXT:    movl %edx, %esi
; AVX1-NEXT:    shrl $31, %esi
; AVX1-NEXT:    sarl $2, %edx
; AVX1-NEXT:    addl %esi, %edx
; AVX1-NEXT:    leal (,%rdx,8), %esi
; AVX1-NEXT:    subl %edx, %esi
; AVX1-NEXT:    subl %esi, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrd $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $2, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrd $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrd $3, %xmm0, %eax
; AVX1-NEXT:    cltq
; AVX1-NEXT:    imulq $-1840700269, %rax, %rcx # imm = 0xFFFFFFFF92492493
; AVX1-NEXT:    shrq $32, %rcx
; AVX1-NEXT:    addl %eax, %ecx
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    sarl $2, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrd $3, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_rem7_8i32:
; AVX2:       # BB#0:
; AVX2-NEXT:    vpbroadcastd {{.*}}(%rip), %ymm1
; AVX2-NEXT:    vpshufd {{.*#+}} ymm2 = ymm1[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpshufd {{.*#+}} ymm3 = ymm0[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpmuldq %ymm2, %ymm3, %ymm2
; AVX2-NEXT:    vpmuldq %ymm1, %ymm0, %ymm1
; AVX2-NEXT:    vpshufd {{.*#+}} ymm1 = ymm1[1,1,3,3,5,5,7,7]
; AVX2-NEXT:    vpblendd {{.*#+}} ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
; AVX2-NEXT:    vpaddd %ymm0, %ymm1, %ymm1
; AVX2-NEXT:    vpsrld $31, %ymm1, %ymm2
; AVX2-NEXT:    vpsrad $2, %ymm1, %ymm1
; AVX2-NEXT:    vpaddd %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpbroadcastd {{.*}}(%rip), %ymm2
; AVX2-NEXT:    vpmulld %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpsubd %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = srem <8 x i32> %a, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  ret <8 x i32> %res
}

define <16 x i16> @test_rem7_16i16(<16 x i16> %a) nounwind {
; AVX1-LABEL: test_rem7_16i16:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrw $1, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vmovd %xmm1, %ecx
; AVX1-NEXT:    movswl %cx, %edx
; AVX1-NEXT:    imull $18725, %edx, %edx # imm = 0x4925
; AVX1-NEXT:    movl %edx, %esi
; AVX1-NEXT:    shrl $16, %esi
; AVX1-NEXT:    sarw %si
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    addl %esi, %edx
; AVX1-NEXT:    leal (,%rdx,8), %esi
; AVX1-NEXT:    subl %edx, %esi
; AVX1-NEXT:    subl %esi, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrw $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $2, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $3, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $4, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $5, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $6, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $7, %xmm1, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $7, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrw $1, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vmovd %xmm0, %ecx
; AVX1-NEXT:    movswl %cx, %edx
; AVX1-NEXT:    imull $18725, %edx, %edx # imm = 0x4925
; AVX1-NEXT:    movl %edx, %esi
; AVX1-NEXT:    shrl $16, %esi
; AVX1-NEXT:    sarw %si
; AVX1-NEXT:    shrl $31, %edx
; AVX1-NEXT:    addl %esi, %edx
; AVX1-NEXT:    leal (,%rdx,8), %esi
; AVX1-NEXT:    subl %edx, %esi
; AVX1-NEXT:    subl %esi, %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm2
; AVX1-NEXT:    vpinsrw $1, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $2, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $3, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $4, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $5, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $6, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrw $7, %xmm0, %eax
; AVX1-NEXT:    movswl %ax, %ecx
; AVX1-NEXT:    imull $18725, %ecx, %ecx # imm = 0x4925
; AVX1-NEXT:    movl %ecx, %edx
; AVX1-NEXT:    shrl $16, %edx
; AVX1-NEXT:    sarw %dx
; AVX1-NEXT:    shrl $31, %ecx
; AVX1-NEXT:    addl %edx, %ecx
; AVX1-NEXT:    leal (,%rcx,8), %edx
; AVX1-NEXT:    subl %ecx, %edx
; AVX1-NEXT:    subl %edx, %eax
; AVX1-NEXT:    vpinsrw $7, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_rem7_16i16:
; AVX2:       # BB#0:
; AVX2-NEXT:    vpmulhw {{.*}}(%rip), %ymm0, %ymm1
; AVX2-NEXT:    vpsrlw $15, %ymm1, %ymm2
; AVX2-NEXT:    vpsraw $1, %ymm1, %ymm1
; AVX2-NEXT:    vpaddw %ymm2, %ymm1, %ymm1
; AVX2-NEXT:    vpmullw {{.*}}(%rip), %ymm1, %ymm1
; AVX2-NEXT:    vpsubw %ymm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = srem <16 x i16> %a, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  ret <16 x i16> %res
}

define <32 x i8> @test_rem7_32i8(<32 x i8> %a) nounwind {
; AVX1-LABEL: test_rem7_32i8:
; AVX1:       # BB#0:
; AVX1-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX1-NEXT:    vpextrb $1, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %edx
; AVX1-NEXT:    imull $-109, %edx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb $7, %dil
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %dl
; AVX1-NEXT:    movzbl %dl, %edx
; AVX1-NEXT:    vpextrb $0, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %esi
; AVX1-NEXT:    imull $-109, %esi, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %sil, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %sil
; AVX1-NEXT:    movzbl %sil, %eax
; AVX1-NEXT:    vmovd %eax, %xmm2
; AVX1-NEXT:    vpinsrb $1, %edx, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $2, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $3, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $4, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $5, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $6, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $7, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $8, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $9, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $10, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $11, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $12, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $13, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $14, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $15, %xmm1, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm1
; AVX1-NEXT:    vpextrb $1, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %esi
; AVX1-NEXT:    vpextrb $0, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %edx
; AVX1-NEXT:    imull $-109, %edx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    movb %al, %cl
; AVX1-NEXT:    shrb $7, %cl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %dl
; AVX1-NEXT:    movzbl %dl, %eax
; AVX1-NEXT:    vmovd %eax, %xmm2
; AVX1-NEXT:    vpinsrb $1, %esi, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $2, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $3, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $4, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $5, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $6, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $7, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $8, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $9, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $10, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $11, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $12, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $13, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $14, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX1-NEXT:    vpextrb $15, %xmm0, %eax
; AVX1-NEXT:    movsbl %al, %ecx
; AVX1-NEXT:    imull $-109, %ecx, %eax
; AVX1-NEXT:    shrl $8, %eax
; AVX1-NEXT:    addb %cl, %al
; AVX1-NEXT:    movb %al, %dl
; AVX1-NEXT:    shrb $7, %dl
; AVX1-NEXT:    sarb $2, %al
; AVX1-NEXT:    addb %dl, %al
; AVX1-NEXT:    mulb %dil
; AVX1-NEXT:    subb %al, %cl
; AVX1-NEXT:    movzbl %cl, %eax
; AVX1-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm0
; AVX1-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test_rem7_32i8:
; AVX2:       # BB#0:
; AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX2-NEXT:    vpextrb $1, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %edx
; AVX2-NEXT:    imull $-109, %edx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb $7, %dil
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %dl
; AVX2-NEXT:    movzbl %dl, %edx
; AVX2-NEXT:    vpextrb $0, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %esi
; AVX2-NEXT:    imull $-109, %esi, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %sil, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %sil
; AVX2-NEXT:    movzbl %sil, %eax
; AVX2-NEXT:    vmovd %eax, %xmm2
; AVX2-NEXT:    vpinsrb $1, %edx, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $2, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $3, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $4, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $5, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $6, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $7, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $8, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $9, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $10, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $11, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $12, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $13, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $14, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $15, %xmm1, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm1
; AVX2-NEXT:    vpextrb $1, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %esi
; AVX2-NEXT:    vpextrb $0, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %edx
; AVX2-NEXT:    imull $-109, %edx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    movb %al, %cl
; AVX2-NEXT:    shrb $7, %cl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %dl
; AVX2-NEXT:    movzbl %dl, %eax
; AVX2-NEXT:    vmovd %eax, %xmm2
; AVX2-NEXT:    vpinsrb $1, %esi, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $2, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $3, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $4, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $5, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $6, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $7, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $8, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $9, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $10, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $11, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $12, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $13, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $14, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX2-NEXT:    vpextrb $15, %xmm0, %eax
; AVX2-NEXT:    movsbl %al, %ecx
; AVX2-NEXT:    imull $-109, %ecx, %eax
; AVX2-NEXT:    shrl $8, %eax
; AVX2-NEXT:    addb %cl, %al
; AVX2-NEXT:    movb %al, %dl
; AVX2-NEXT:    shrb $7, %dl
; AVX2-NEXT:    sarb $2, %al
; AVX2-NEXT:    addb %dl, %al
; AVX2-NEXT:    mulb %dil
; AVX2-NEXT:    subb %al, %cl
; AVX2-NEXT:    movzbl %cl, %eax
; AVX2-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm0
; AVX2-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX2-NEXT:    retq
  %res = srem <32 x i8> %a, <i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7,i8 7, i8 7, i8 7, i8 7>
  ret <32 x i8> %res
}
