; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple=x86_64-unknown-linux-gnu -mcpu=corei7 -bb-vectorize -bb-vectorize-req-chain-depth=3 -instcombine -gvn -S | FileCheck %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"

; Basic depth-3 chain
define double @test1(double %A1, double %A2, double %B1, double %B2) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[X1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I1_2:%.*]] = insertelement <2 x double> [[X1_V_I1_1]], double [[B2:%.*]], i32 1
; CHECK-NEXT:    [[X1_V_I0_1:%.*]] = insertelement <2 x double> undef, double [[A1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I0_2:%.*]] = insertelement <2 x double> [[X1_V_I0_1]], double [[A2:%.*]], i32 1
; CHECK-NEXT:    [[X1:%.*]] = fsub <2 x double> [[X1_V_I0_2]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Y1:%.*]] = fmul <2 x double> [[X1]], [[X1_V_I0_2]]
; CHECK-NEXT:    [[Z1:%.*]] = fadd <2 x double> [[Y1]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Z1_V_R1:%.*]] = extractelement <2 x double> [[Z1]], i32 0
; CHECK-NEXT:    [[Z1_V_R2:%.*]] = extractelement <2 x double> [[Z1]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1_V_R1]], [[Z1_V_R2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = fmul double %X1, %A1
  %Y2 = fmul double %X2, %A2
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic chain
define double @test1a(double %A1, double %A2, double %B1, double %B2) {
; CHECK-LABEL: @test1a(
; CHECK-NEXT:    [[X1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I1_2:%.*]] = insertelement <2 x double> [[X1_V_I1_1]], double [[B2:%.*]], i32 1
; CHECK-NEXT:    [[X1_V_I0_1:%.*]] = insertelement <2 x double> undef, double [[A1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I0_2:%.*]] = insertelement <2 x double> [[X1_V_I0_1]], double [[A2:%.*]], i32 1
; CHECK-NEXT:    [[X1:%.*]] = fsub <2 x double> [[X1_V_I0_2]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Y1:%.*]] = fmul <2 x double> [[X1]], [[X1_V_I0_2]]
; CHECK-NEXT:    [[Z1:%.*]] = fadd <2 x double> [[Y1]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[W1:%.*]] = fadd <2 x double> [[Y1]], [[Z1]]
; CHECK-NEXT:    [[V1:%.*]] = fadd <2 x double> [[W1]], [[Z1]]
; CHECK-NEXT:    [[Q1:%.*]] = fadd <2 x double> [[W1]], [[V1]]
; CHECK-NEXT:    [[S1:%.*]] = fadd <2 x double> [[W1]], [[Q1]]
; CHECK-NEXT:    [[S1_V_R1:%.*]] = extractelement <2 x double> [[S1]], i32 0
; CHECK-NEXT:    [[S1_V_R2:%.*]] = extractelement <2 x double> [[S1]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fmul double [[S1_V_R1]], [[S1_V_R2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = fmul double %X1, %A1
  %Y2 = fmul double %X2, %A2
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %W1 = fadd double %Y1, %Z1
  %W2 = fadd double %Y2, %Z2
  %V1 = fadd double %W1, %Z1
  %V2 = fadd double %W2, %Z2
  %Q1 = fadd double %W1, %V1
  %Q2 = fadd double %W2, %V2
  %S1 = fadd double %W1, %Q1
  %S2 = fadd double %W2, %Q2
  %R  = fmul double %S1, %S2
  ret double %R
}

; Basic depth-3 chain (last pair permuted)
define double @test2(double %A1, double %A2, double %B1, double %B2) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[X1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I1_2:%.*]] = insertelement <2 x double> [[X1_V_I1_1]], double [[B2:%.*]], i32 1
; CHECK-NEXT:    [[X1_V_I0_1:%.*]] = insertelement <2 x double> undef, double [[A1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I0_2:%.*]] = insertelement <2 x double> [[X1_V_I0_1]], double [[A2:%.*]], i32 1
; CHECK-NEXT:    [[X1:%.*]] = fsub <2 x double> [[X1_V_I0_2]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Y1:%.*]] = fmul <2 x double> [[X1]], [[X1_V_I0_2]]
; CHECK-NEXT:    [[Z1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B2]], i32 0
; CHECK-NEXT:    [[Z1_V_I1_2:%.*]] = insertelement <2 x double> [[Z1_V_I1_1]], double [[B1]], i32 1
; CHECK-NEXT:    [[Z2:%.*]] = fadd <2 x double> [[Y1]], [[Z1_V_I1_2]]
; CHECK-NEXT:    [[Z2_V_R1:%.*]] = extractelement <2 x double> [[Z2]], i32 0
; CHECK-NEXT:    [[Z2_V_R2:%.*]] = extractelement <2 x double> [[Z2]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z2_V_R2]], [[Z2_V_R1]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = fmul double %X1, %A1
  %Y2 = fmul double %X2, %A2
  %Z1 = fadd double %Y2, %B1
  %Z2 = fadd double %Y1, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic depth-4 chain (internal permutation)
define double @test4(double %A1, double %A2, double %B1, double %B2) {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    [[X1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I1_2:%.*]] = insertelement <2 x double> [[X1_V_I1_1]], double [[B2:%.*]], i32 1
; CHECK-NEXT:    [[X1_V_I0_1:%.*]] = insertelement <2 x double> undef, double [[A1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I0_2:%.*]] = insertelement <2 x double> [[X1_V_I0_1]], double [[A2:%.*]], i32 1
; CHECK-NEXT:    [[X1:%.*]] = fsub <2 x double> [[X1_V_I0_2]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Y1:%.*]] = fmul <2 x double> [[X1]], [[X1_V_I0_2]]
; CHECK-NEXT:    [[Z1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B2]], i32 0
; CHECK-NEXT:    [[Z1_V_I1_2:%.*]] = insertelement <2 x double> [[Z1_V_I1_1]], double [[B1]], i32 1
; CHECK-NEXT:    [[Z2:%.*]] = fadd <2 x double> [[Y1]], [[Z1_V_I1_2]]
; CHECK-NEXT:    [[Z2_V_R1:%.*]] = extractelement <2 x double> [[Z2]], i32 0
; CHECK-NEXT:    [[Z2_V_R2:%.*]] = extractelement <2 x double> [[Z2]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z2_V_R2]], [[Z2_V_R1]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = fmul double %X1, %A1
  %Y2 = fmul double %X2, %A2
  %Z1 = fadd double %Y2, %B1
  %Z2 = fadd double %Y1, %B2
  %W1 = fadd double %Y2, %Z1
  %W2 = fadd double %Y1, %Z2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic chain with shuffles
define <8 x i8> @test6(<8 x i8> %A1, <8 x i8> %A2, <8 x i8> %B1, <8 x i8> %B2) {
; CHECK-LABEL: @test6(
; CHECK-NEXT:    [[X1:%.*]] = sub <8 x i8> [[A1:%.*]], [[B1:%.*]]
; CHECK-NEXT:    [[X2:%.*]] = sub <8 x i8> [[A2:%.*]], [[B2:%.*]]
; CHECK-NEXT:    [[Y1:%.*]] = mul <8 x i8> [[X1]], [[A1]]
; CHECK-NEXT:    [[Y2:%.*]] = mul <8 x i8> [[X2]], [[A2]]
; CHECK-NEXT:    [[Z1:%.*]] = add <8 x i8> [[Y1]], [[B1]]
; CHECK-NEXT:    [[Z2:%.*]] = add <8 x i8> [[Y2]], [[B2]]
; CHECK-NEXT:    [[Q1:%.*]] = shufflevector <8 x i8> [[Z1]], <8 x i8> [[Z2]], <8 x i32> <i32 15, i32 8, i32 6, i32 1, i32 13, i32 10, i32 4, i32 3>
; CHECK-NEXT:    [[Q2:%.*]] = shufflevector <8 x i8> [[Z2]], <8 x i8> undef, <8 x i32> <i32 6, i32 7, i32 0, i32 1, i32 2, i32 4, i32 4, i32 1>
; CHECK-NEXT:    [[R:%.*]] = mul <8 x i8> [[Q1]], [[Q2]]
; CHECK-NEXT:    ret <8 x i8> [[R]]
;
  %X1 = sub <8 x i8> %A1, %B1
  %X2 = sub <8 x i8> %A2, %B2
  %Y1 = mul <8 x i8> %X1, %A1
  %Y2 = mul <8 x i8> %X2, %A2
  %Z1 = add <8 x i8> %Y1, %B1
  %Z2 = add <8 x i8> %Y2, %B2
  %Q1 = shufflevector <8 x i8> %Z1, <8 x i8> %Z2, <8 x i32> <i32 15, i32 8, i32 6, i32 1, i32 13, i32 10, i32 4, i32 3>
  %Q2 = shufflevector <8 x i8> %Z2, <8 x i8> %Z2, <8 x i32> <i32 6, i32 7, i32 0, i32 1, i32 2, i32 4, i32 4, i32 1>
  %R  = mul <8 x i8> %Q1, %Q2
  ret <8 x i8> %R
}

