; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple=x86_64-unknown-linux-gnu -mcpu=corei7 -bb-vectorize -bb-vectorize-req-chain-depth=3 -instcombine -gvn -S | FileCheck %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128"

declare double @llvm.fma.f64(double, double, double)
declare double @llvm.fmuladd.f64(double, double, double)
declare double @llvm.cos.f64(double)
declare double @llvm.powi.f64(double, i32)

; Basic depth-3 chain with fma
define double @test1(double %A1, double %A2, double %B1, double %B2, double %C1, double %C2) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[X1:%.*]] = fsub double [[A1:%.*]], [[B1:%.*]]
; CHECK-NEXT:    [[X2:%.*]] = fsub double [[A2:%.*]], [[B2:%.*]]
; CHECK-NEXT:    [[Y1:%.*]] = call double @llvm.fma.f64(double [[X1]], double [[A1]], double [[C1:%.*]])
; CHECK-NEXT:    [[Y2:%.*]] = call double @llvm.fma.f64(double [[X2]], double [[A2]], double [[C2:%.*]])
; CHECK-NEXT:    [[Z1:%.*]] = fadd double [[Y1]], [[B1]]
; CHECK-NEXT:    [[Z2:%.*]] = fadd double [[Y2]], [[B2]]
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1]], [[Z2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = call double @llvm.fma.f64(double %X1, double %A1, double %C1)
  %Y2 = call double @llvm.fma.f64(double %X2, double %A2, double %C2)
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic depth-3 chain with fmuladd
define double @test1a(double %A1, double %A2, double %B1, double %B2, double %C1, double %C2) {
; CHECK-LABEL: @test1a(
; CHECK-NEXT:    [[X1_V_I1_1:%.*]] = insertelement <2 x double> undef, double [[B1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I1_2:%.*]] = insertelement <2 x double> [[X1_V_I1_1]], double [[B2:%.*]], i32 1
; CHECK-NEXT:    [[X1_V_I0_1:%.*]] = insertelement <2 x double> undef, double [[A1:%.*]], i32 0
; CHECK-NEXT:    [[X1_V_I0_2:%.*]] = insertelement <2 x double> [[X1_V_I0_1]], double [[A2:%.*]], i32 1
; CHECK-NEXT:    [[X1:%.*]] = fsub <2 x double> [[X1_V_I0_2]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Y1_V_I2_1:%.*]] = insertelement <2 x double> undef, double [[C1:%.*]], i32 0
; CHECK-NEXT:    [[Y1_V_I2_2:%.*]] = insertelement <2 x double> [[Y1_V_I2_1]], double [[C2:%.*]], i32 1
; CHECK-NEXT:    [[Y1:%.*]] = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> [[X1]], <2 x double> [[X1_V_I0_2]], <2 x double> [[Y1_V_I2_2]])
; CHECK-NEXT:    [[Z1:%.*]] = fadd <2 x double> [[Y1]], [[X1_V_I1_2]]
; CHECK-NEXT:    [[Z1_V_R1:%.*]] = extractelement <2 x double> [[Z1]], i32 0
; CHECK-NEXT:    [[Z1_V_R2:%.*]] = extractelement <2 x double> [[Z1]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1_V_R1]], [[Z1_V_R2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = call double @llvm.fmuladd.f64(double %X1, double %A1, double %C1)
  %Y2 = call double @llvm.fmuladd.f64(double %X2, double %A2, double %C2)
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic depth-3 chain with cos
define double @test2(double %A1, double %A2, double %B1, double %B2) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[X1:%.*]] = fsub double [[A1:%.*]], [[B1:%.*]]
; CHECK-NEXT:    [[X2:%.*]] = fsub double [[A2:%.*]], [[B2:%.*]]
; CHECK-NEXT:    [[Y1:%.*]] = call double @llvm.cos.f64(double [[X1]])
; CHECK-NEXT:    [[Y2:%.*]] = call double @llvm.cos.f64(double [[X2]])
; CHECK-NEXT:    [[Z1:%.*]] = fadd double [[Y1]], [[B1]]
; CHECK-NEXT:    [[Z2:%.*]] = fadd double [[Y2]], [[B2]]
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1]], [[Z2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = call double @llvm.cos.f64(double %X1)
  %Y2 = call double @llvm.cos.f64(double %X2)
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic depth-3 chain with powi
define double @test3(double %A1, double %A2, double %B1, double %B2, i32 %P) {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    [[X1:%.*]] = fsub double [[A1:%.*]], [[B1:%.*]]
; CHECK-NEXT:    [[X2:%.*]] = fsub double [[A2:%.*]], [[B2:%.*]]
; CHECK-NEXT:    [[Y1:%.*]] = call double @llvm.powi.f64(double [[X1]], i32 [[P:%.*]])
; CHECK-NEXT:    [[Y2:%.*]] = call double @llvm.powi.f64(double [[X2]], i32 [[P]])
; CHECK-NEXT:    [[Z1:%.*]] = fadd double [[Y1]], [[B1]]
; CHECK-NEXT:    [[Z2:%.*]] = fadd double [[Y2]], [[B2]]
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1]], [[Z2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %Y1 = call double @llvm.powi.f64(double %X1, i32 %P)
  %Y2 = call double @llvm.powi.f64(double %X2, i32 %P)
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

; Basic depth-3 chain with powi (different powers: should not vectorize)
define double @test4(double %A1, double %A2, double %B1, double %B2, i32 %P) {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    [[X1:%.*]] = fsub double [[A1:%.*]], [[B1:%.*]]
; CHECK-NEXT:    [[X2:%.*]] = fsub double [[A2:%.*]], [[B2:%.*]]
; CHECK-NEXT:    [[P2:%.*]] = add i32 [[P:%.*]], 1
; CHECK-NEXT:    [[Y1:%.*]] = call double @llvm.powi.f64(double [[X1]], i32 [[P]])
; CHECK-NEXT:    [[Y2:%.*]] = call double @llvm.powi.f64(double [[X2]], i32 [[P2]])
; CHECK-NEXT:    [[Z1:%.*]] = fadd double [[Y1]], [[B1]]
; CHECK-NEXT:    [[Z2:%.*]] = fadd double [[Y2]], [[B2]]
; CHECK-NEXT:    [[R:%.*]] = fmul double [[Z1]], [[Z2]]
; CHECK-NEXT:    ret double [[R]]
;
  %X1 = fsub double %A1, %B1
  %X2 = fsub double %A2, %B2
  %P2 = add i32 %P, 1
  %Y1 = call double @llvm.powi.f64(double %X1, i32 %P)
  %Y2 = call double @llvm.powi.f64(double %X2, i32 %P2)
  %Z1 = fadd double %Y1, %B1
  %Z2 = fadd double %Y2, %B2
  %R  = fmul double %Z1, %Z2
  ret double %R
}

