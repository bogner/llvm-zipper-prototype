## Different "echo" commands on Windows interpret quoted strings and
## wildcards in similar but different way (On Windows, ARGV tokenization
## and wildcard expansion are not done by the shell but by each command.)
## Because of that reason, this test fails on some Windows environment.
## We can't write quoted strings that are interpreted the same way
## by all echo commands. So, we don't want to run this on Windows.

# REQUIRES: shell

# RUN: mkdir -p %t.dir

## Note that we are using "-r option is not supported" as a marker
## that the linker keep going when it found an error. That specific
## error message is not related to the linker script tests.

# RUN: echo foobar > %t1
# RUN: not ld.lld -r %t1 2>&1 | FileCheck -check-prefix=ERR1 %s
# ERR1: unknown directive: foobar
# ERR1: -r option is not supported

# RUN: echo "foo \"bar" > %t2
# RUN: not ld.lld -r %t2 2>&1 | FileCheck -check-prefix=ERR2 %s
# ERR2: unclosed quote
# ERR2: -r option is not supported

# RUN: echo "/*" > %t3
# RUN: not ld.lld -r %t3 2>&1 | FileCheck -check-prefix=ERR3 %s
# ERR3: unclosed comment
# ERR3: -r option is not supported

# RUN: echo "EXTERN (" > %t4
# RUN: not ld.lld -r %t4 2>&1 | FileCheck -check-prefix=ERR4 %s
# ERR4: unexpected EOF
# ERR4: -r option is not supported

# RUN: echo "EXTERN (" > %t5
# RUN: not ld.lld -r %t5 2>&1 | FileCheck -check-prefix=ERR5 %s
# ERR5: unexpected EOF
# ERR5: -r option is not supported

# RUN: echo "EXTERN xyz" > %t6
# RUN: not ld.lld -r %t6 2>&1 | FileCheck -check-prefix=ERR6 %s
# ERR6: ( expected, but got xyz
# ERR6: -r option is not supported

# RUN: echo "INCLUDE /no/such/file" > %t7
# RUN: not ld.lld -r %t7 2>&1 | FileCheck -check-prefix=ERR7 %s
# ERR7: cannot open /no/such/file
# ERR7: -r option is not supported

# RUN: echo "OUTPUT_FORMAT(x y z)" > %t8
# RUN: not ld.lld -r %t8 2>&1 | FileCheck -check-prefix=ERR8 %s
# ERR8: unexpected token: y
# ERR8: -r option is not supported