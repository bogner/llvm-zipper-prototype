# RUN: mkdir -p %t.dir

## Note that we will see "no input files" error message after
## error messages from the linker script parser, because the
## linker keeps going when an error is found.

# RUN: echo foobar > %t1
# RUN: not ld.lld %t1 2>&1 | FileCheck -check-prefix=ERR1 %s
# ERR1: unknown directive: foobar
# ERR1: no input files

# RUN: echo "foo \"bar" > %t2
# RUN: not ld.lld %t2 2>&1 | FileCheck -check-prefix=ERR2 %s
# ERR2: unclosed quote
# ERR2: no input files

# RUN: echo "/*" > %t3
# RUN: not ld.lld %t3 2>&1 | FileCheck -check-prefix=ERR3 %s
# ERR3: unclosed comment
# ERR3: no input files

# RUN: echo "EXTERN (" > %t4
# RUN: not ld.lld %t4 2>&1 | FileCheck -check-prefix=ERR4 %s
# ERR4: unexpected EOF
# ERR4: no input files

# RUN: echo "EXTERN (" > %t5
# RUN: not ld.lld %t5 2>&1 | FileCheck -check-prefix=ERR5 %s
# ERR5: unexpected EOF
# ERR5: no input files

# RUN: echo "EXTERN xyz" > %t6
# RUN: not ld.lld %t6 2>&1 | FileCheck -check-prefix=ERR6 %s
# ERR6: ( expected, but got xyz
# ERR6: no input files

# RUN: echo "INCLUDE /no/such/file" > %t7
# RUN: not ld.lld %t7 2>&1 | FileCheck -check-prefix=ERR7 %s
# ERR7: cannot open /no/such/file
# ERR7: no input files

# RUN: echo "OUTPUT_FORMAT(x y z)" > %t8
# RUN: not ld.lld %t8 2>&1 | FileCheck -check-prefix=ERR8 %s
# ERR8: unexpected token: y
# ERR8: no input files
