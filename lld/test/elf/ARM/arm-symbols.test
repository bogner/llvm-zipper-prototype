# Check that symbols formed from ARM instructions are valid:
# 1. Symbol address.
# 2. Symbol content size.
# 3. Symbol content.

# RUN: yaml2obj -format=elf %s > %t-a.o
# RUN: lld -flavor gnu -target arm-linux-gnu \
# RUN: -Bstatic --noinhibit-exec %t-a.o -o %t-a
# RUN: llvm-readobj -symbols %t-a | FileCheck -check-prefix=SYM-ADDR %s
# RUN: llvm-readobj -symbols %t-a | FileCheck -check-prefix=SYM-SIZE %s
# RUN: llvm-objdump -s -t %t-a | FileCheck -check-prefix=SYM-CONTENT %s

# SYM-ADDR:   Name: main (1)
# SYM-ADDR-NEXT:   Value: 0x400074

# SYM-SIZE:   Name: main (1)
# SYM-SIZE-NEXT:   Value: 0x{{[0-9a-f]+}}
# SYM-SIZE-NEXT:   Size: 28

# SYM-CONTENT: Contents of section .text:
# SYM-CONTENT-NEXT: 400074 04b02de5 00b08de2 0030a0e3 0300a0e1  ..-......0......
# SYM-CONTENT-NEXT: 400084 00d04be2 04b09de4 1eff2fe1           ..K......./.

---
FileHeader:
  Class:           ELFCLASS32
  Data:            ELFDATA2LSB
  Type:            ET_REL
  Machine:         EM_ARM
  Flags:           [ EF_ARM_EABI_VER5 ]
Sections:
  - Name:            .text
    Type:            SHT_PROGBITS
    Flags:           [ SHF_ALLOC, SHF_EXECINSTR ]
    AddressAlign:    0x0000000000000004
    Content:         04B02DE500B08DE20030A0E30300A0E100D04BE204B09DE41EFF2FE1
  - Name:            .data
    Type:            SHT_PROGBITS
    Flags:           [ SHF_WRITE, SHF_ALLOC ]
    AddressAlign:    0x0000000000000001
    Content:         ''
  - Name:            .bss
    Type:            SHT_NOBITS
    Flags:           [ SHF_WRITE, SHF_ALLOC ]
    AddressAlign:    0x0000000000000001
    Content:         ''
Symbols:
  Global:
    - Name:            main
      Type:            STT_FUNC
      Section:         .text
...
