REQUIRES: windows
RUN: clang-cl -m32 /Z7 /c /GS- %S/Inputs/SimpleTypesTest.cpp /o %T/SimpleTypesTest.cpp.typedefs.obj
RUN: link %T/SimpleTypesTest.cpp.typedefs.obj /DEBUG /nodefaultlib /ENTRY:main /OUT:%T/SimpleTypesTest.cpp.typedefs.exe
RUN: lldb-test symbols %T/SimpleTypesTest.cpp.typedefs.exe | FileCheck %s

; Generate 32-bit target

; FIXME: PDB does not have line information for typedef statements so source
; and line information for them is not tested.

; Note, types `long double` and `double` have same bit size in MSVC and there
; is no information in the PDB to distinguish them. So the compiler type for 
; both of them is the same.

CHECK: Module [[CU:.*]]
CHECK-DAG:  {{^[0-9A-F]+}}: SymbolVendor ([[CU]])
CHECK:      Type{{.*}} , name = "unsigned long", size = 4, compiler_type = {{.*}} unsigned long
CHECK-NEXT: Type{{.*}} , size = 40, compiler_type = {{.*}} unsigned long [10]
CHECK-NEXT: Type{{.*}} , name = "ULongArrayTypedef", compiler_type = {{.*}} typedef ULongArrayTypedef

; Note: compiler_type of `long double` is represented by the one for `double`
CHECK:      Type{{.*}} , name = "double", size = 8, compiler_type = {{.*}} double
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} double *
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} double *&
CHECK-DAG: Type{{.*}} , name = "RefTypedef", compiler_type = {{.*}} typedef RefTypedef

CHECK:      Type{{.*}} , name = "int", size = 4, compiler_type = {{.*}} int
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} int &
CHECK-NEXT: Type{{.*}} , name = "unsigned char", size = 1, compiler_type = {{.*}} unsigned char
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} unsigned char *
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} unsigned char **
CHECK-NEXT: Type{{.*}} , name = "short", size = 2, compiler_type = {{.*}} short
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} short *
CHECK-NEXT: Type{{.*}} , name = "const double", size = 8, compiler_type = {{.*}} const double
CHECK-NEXT: Type{{.*}} , name = "volatile bool", size = 1, compiler_type = {{.*}} volatile _Bool
CHECK-NEXT: Type{{.*}} , name = "long long", size = 8, compiler_type = {{.*}} long long
CHECK-NEXT: Type{{.*}} , compiler_type = {{.*}} long long (int &, unsigned char **, short *, const double, volatile _Bool)
CHECK-DAG:  Type{{.*}} , name = "FuncPtrTypedef", compiler_type = {{.*}} typedef FuncPtrTypedef

CHECK:      Type{{.*}} , name = "void", compiler_type = {{.*}} void
CHECK-NEXT: Type{{.*}} , size = 4, compiler_type = {{.*}} void *
CHECK-NEXT: Type{{.*}} , name = "long", size = 4, compiler_type = {{.*}} long
CHECK-NEXT: Type{{.*}} , name = "unsigned short", size = 2, compiler_type = {{.*}} unsigned short
CHECK-NEXT: Type{{.*}} , name = "unsigned int", size = 4, compiler_type = {{.*}} unsigned int
CHECK-NEXT: Type{{.*}} , name = "signed char", size = 1, compiler_type = {{.*}} signed char
CHECK-NEXT: Type{{.*}} , compiler_type = {{.*}} signed char (void *, long, unsigned short, unsigned int, ...)
CHECK-DAG:  Type{{.*}} , size = 4, compiler_type = {{.*}} signed char (*)(void *, long, unsigned short, unsigned int, ...)
CHECK-DAG:  Type{{.*}} , name = "VarArgsFuncTypedef", compiler_type = {{.*}} typedef VarArgsFuncTypedef

CHECK:      Type{{.*}} , name = "float", size = 4, compiler_type = {{.*}} float
CHECK-NEXT: Type{{.*}} , compiler_type = {{.*}} float (...)
CHECK-DAG:  Type{{.*}} , size = 4, compiler_type = {{.*}} float (*)(...)
CHECK-DAG:  Type{{.*}} , name = "VarArgsFuncTypedefA", compiler_type = {{.*}} typedef VarArgsFuncTypedefA

CHECK-DAG: {{^[0-9A-F]+}}:   CompileUnit{{[{]0x[0-9a-f]+[}]}}, language = "c++", file = '{{.*}}\SimpleTypesTest.cpp'
